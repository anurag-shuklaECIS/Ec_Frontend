var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true})), module2);
};

// src/shim/index.ts
__markAsModule(exports);
__export(exports, {
  disconnect: () => disconnect,
  setup: () => setup
});
var import__ = __toModule(require("../twind.cjs"));
var import_observe = __toModule(require("../observe/observe.cjs"));
if (typeof document !== "undefined" && typeof addEventListener == "function") {
  onload = () => {
    const script = document.querySelector('script[type="twind-config"]');
    setup(script ? JSON.parse(script.innerHTML) : {});
  };
  if (document.readyState === "loading") {
    addEventListener("DOMContentLoaded", onload);
  } else {
    timeoutRef = setTimeout(onload);
  }
}
var onload;
var timeoutRef;
var observer = import_observe.createObserver();
var disconnect = () => {
  if (onload) {
    removeEventListener("DOMContentLoaded", onload);
    clearTimeout(timeoutRef);
  }
  observer.disconnect();
};
var setup = ({
  target = document.documentElement,
  ...config
} = {}) => {
  if (Object.keys(config).length) {
    import__.setup(config);
  }
  disconnect();
  observer.observe(target);
  target.hidden = false;
};
//# sourceMappingURL=shim.cjs.map
