{
  "version": 3,
  "sources": ["../../src/shim/index.ts"],
  "sourcesContent": ["/**\n * [[include:src/shim/README.md]]\n *\n * @packageDocumentation\n * @module twind/shim\n */\n\nimport type { Configuration } from '../types'\n\nimport { setup as setupTW } from '../index'\nimport { createObserver } from '../observe/index'\n\n/**\n * Options for {@link setup}.\n */\nexport interface ShimConfiguration extends Configuration {\n  /**\n   * The root element to shim (default: `document.documentElement`).\n   */\n  target?: HTMLElement\n}\n\nif (typeof document !== 'undefined' && typeof addEventListener == 'function') {\n  // eslint-disable-next-line no-var\n  var onload = () => {\n    const script = document.querySelector('script[type=\"twind-config\"]')\n\n    setup(script ? JSON.parse(script.innerHTML) : {})\n  }\n\n  if (document.readyState === 'loading') {\n    // Loading hasn't finished yet\n    addEventListener('DOMContentLoaded', onload)\n  } else {\n    // `DOMContentLoaded` has already fired\n    // invoke on next tick to allow other setup methods to run\n    // eslint-disable-next-line no-var\n    var timeoutRef = setTimeout(onload)\n  }\n}\n\nconst observer = createObserver()\n\n/**\n * Stop shimming/observing all nodes.\n */\nexport const disconnect = (): void => {\n  if (onload) {\n    // Removing the callbacks ensures that the setup is called only once\n    // either programmatically from userland or by DOMContentLoaded/setTimeout\n    removeEventListener('DOMContentLoaded', onload)\n    clearTimeout(timeoutRef)\n  }\n\n  observer.disconnect()\n}\n\n/**\n * Configure the default {@link tw} and starts {@link observe | observing} the\n * {@link ShimConfiguration.target | target element} (default: `document.documentElement`).\n *\n * You do not need to call this method. As an alternativ you can provide a\n * `<script type=\"twind-config\">...</script>` element within the document.\n * The content must be valid JSON and all {@link twind.setup | twind setup options}\n * (including hash) are supported.\n */\nexport const setup = ({\n  target = document.documentElement,\n  ...config\n}: ShimConfiguration = {}): void => {\n  if (Object.keys(config).length) {\n    setupTW(config)\n  }\n\n  // Remove event listeners\n  disconnect()\n\n  observer.observe(target)\n\n  target.hidden = false\n}\n"],
  "mappings": "AASA,oCACA,uDAYA,AAAI,MAAO,WAAa,aAAe,MAAO,mBAAoB,YAE5D,GAAS,KACX,GAAM,GAAS,SAAS,cAAc,+BAEtC,EAAM,EAAS,KAAK,MAAM,EAAO,WAAa,KAGhD,AAAI,SAAS,aAAe,UAE1B,iBAAiB,mBAAoB,GAKjC,EAAa,WAAW,IAb1B,MAaE,EAIF,EAAW,IAKJ,EAAa,KACxB,AAAI,GAGF,qBAAoB,mBAAoB,GACxC,aAAa,IAGf,EAAS,cAYE,EAAQ,CAAC,CACpB,SAAS,SAAS,mBACf,GACkB,MACrB,AAAI,OAAO,KAAK,GAAQ,QACtB,EAAQ,GAIV,IAEA,EAAS,QAAQ,GAEjB,EAAO,OAAS",
  "names": []
}
